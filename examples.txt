#sentences
#sentence = ["Vería" , "esa" , "película" , "una" , "y" , "otra" , "vez" , "sin" , "parar"]
#sentence  = ["dime" , "si" , "te", "sientes" , "cansada"]
#result=procSentence(sentence)
#print (result)

#dbConn
#aux=senseSearch("sueño"); #17 rows
#print (aux[16][2]);
#subj, obj= searchSubjectivity(aux[16][2]);
#print ("subjectivity = " + str(subj) + " objectivity = " +str(obj));
#aux=offsetSearch("sueño",'N');
#for i in range(len(aux)):
#	print (glossSearch(aux[i][0]));

#main
#sentence = ["Vería" , "esa" , "película" ,"de" , "baja", "estofa", "una" , "y" , "otra" , "vez" , "sin" , "parar"]

#result=s.procSentence(sentence)
#words,lemmas,tags=fu.procText(result)
#print (words,lemmas,tags)


#freeling
#procText("Esto es bastante estupido")
#words,lemmas,tags=procText("Vería esa película una_y_otra_vez")
#print (words,lemmas,tags)
#print (dependencyParser("Vería esa película una_y_otra_vez"))

#Graph
g = Graph()
for i in range(6):
	g.addVertex(i)
g.addEdge(0,1,5)
g.addEdge(0,5,2)
g.addEdge(1,2,4)
g.addEdge(2,3,9)
g.addEdge(3,4,7)
g.addEdge(3,5,3)
g.addEdge(4,0,1)
g.addEdge(5,4,8)
g.addEdge(5,2,1)

for v in g:
	print (str(v))
	for w in v.getConnections():
		print("( %s , %s , %s )" % (v.getId(), w.getId(),v.getWeight(w)))

print (getDistance ('spa-30-00001740-a' , 'spa-30-00001740-r') )

